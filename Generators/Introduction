URL : https://www.programiz.com/python-programming/generator


What is Generator?
A generator is a function that returns an object (iterator) which we can iterate over (one value at a time).


How to use ?
It is fairly simple to create a generator in Python.
It is as easy as defining a normal function with yield statement instead of a return statement.


Difference between Generator and a Noramal Functions?
    1. Generator function contains one or more yield statement.
    2. When called, it returns an object (iterator) but does not start execution immediately.
    3. Methods like __iter__() and __next__() are implemented automatically. So we can iterate through the items using next().
    4. Once the function yields, the function is paused and the control is transferred to the caller.
    5. Local variables and their states are remembered between successive calls.
    6. Finally, when the function terminates, StopIteration is raised automatically on further calls.


Why Generators?
    1. Easy to implement
    2. Memory efficient:
        A normal function to return a sequence will create the entire sequence in memory before returning the result.
        This is an overkill if the number of items in the sequence is very large.
        Generator implementation of such sequence is memory friendly and is preferred since it only produces one item at a time.
    3. Represent infinite stream
    4. Pipeline generators.


Initialisation:
    # Initialize the list
    my_list = [1, 3, 6, 10]

    # square each term using list comprehension
    # Output: [1, 9, 36, 100]
    [x**2 for x in my_list]

    # same thing can be done using generator expression
    # Output: <generator object <genexpr> at 0x0000000002EBDAF8>
    (x**2 for x in my_list)
