Three pillars of Docker Networking:
===================================
1. CNM - Container Network Model.
2. LibNetwork
3. Drivers

CNM:
====
- DNA of Docker networking.
- https://github.com/docker/libnetwork/blob/master/docs/design.md

CNM contains 3 blocks:
======================
1.Sandbox
2.Endpoint
3.Network

Sandbox:
========
- aka namespace
- isolated area of os
- contains full network stack

Endpoint:
=========
- network interface
- ex: eth0

Networks:
=========
- connected endpoints

Libnetwork: control plane:
==========================
- Actual implementaion of CNM written in GO
- https://github.com/docker/libnetworkX-platform
- pluggable


Drivers: Data plane:
====================
- overlay 
- MACVLAN
- Bridge


- Distributed KV store
- Network gossip
- Encryption
- Service Discovery
- IP address management



Practical commands:
====================
docker network ls
docker network inspect <name>/<networkID>

Single Host Networking:
========================
- user defined bridge/NAT bridge
- 802.1d bridge
- aka virtual switch
- container from one host can't talk to another containers in another host
- docker network create -d bridge --subnet 10.0.0.1/24 ps-beidge
- apt-get bridge-utils
- brctl show
- ip link show

- docker run -dt --name c1 --network ps-bridge alpine sleep 1d

Multi-host Oberlay Networking:
==============================
- It creates a single layer 2 network which eliminates port mapping
- VXLAN tunner/overlay 
- on each host , we create a sandbox.
- each sandbox has single bridge(network stack).
- VXTUNNEL endpoint got created and plugged into VXLAN TUNNEL.

Hands on:
=========
- docker swarm init
- docker network create -d overlay ps-over 
- docker network ls 
- check the scope in the output
- create a container on the network.
- docker service create --name ps-service --network ps-over --replicas 2 sleep 1d

MACVLAN DRIVER:
===============
- container centric
- joining running container with existing MACLAN network
- attach containers to existing networks - keep it simple

Service Discovery:
==================
- Service Discovery is automatic in Docker.
- for services or containers created with --name or --alias
- every container gets a small DNS resolver.
- Listens on 127.0.0.11:53
- Forwards requests to DNS server on DOCKER host.
- Network scoped.

Routing Mesh:
=============
- The routing mesh enables each node in the swarm to accept connections on published ports
- for any service running in the swarm, even if there's no task running on the node.
- The routing mesh routes all incoming requests to published ports on available nodes to an active container.
