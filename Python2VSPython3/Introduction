Difference between Python 2 and Python 3:
-----------------------------------------

1.  raw_input Function:
    -------------------
    raw_input () is replaced by input() in Python 3.x

    ex:

    val = input("Enter the Value:")

2.  range() and xrange() functions:
    -------------------------------
    range() and xrange() are two functions that could be used to iterate a certain number of times
    in a for loop.
    But in Pyhton 3.x there is no xrange() , but range() function behaves like xrange() in 2.x

    range() function returns a list of numbers

    xrange() returns the generator object that can be used to display numbers only by looping.
    only particular range is displayed on demand hence called "lazy evaluation".

    Different Characteristics:
    --------------------------
        1.  Return type:
            -----------
            range() returns the list as return type.
            xrange() returns xrange() object.

            example:
                a = range(1,100)

                x = xrange(1,100)

                #testing the type of the return type of a

                print("The type of a is : {}".format(type(a)))

                Output:

                List

                print("The type of a is : {}".format(type(x)))

                Output:

                xrange Object


        2.  Memory:
            -------
            The variable storing the range takes more memory as compared to xrange()

            print(sys.getsize(a))

            print(sys.getsize(x))

        3.  Operator Usage:
            ---------------
            You can not perform slice operation on the dict object.

            a[2:5] : is allowed for range() object.

            x[2:5] : is not allowed for xrange() object. You will get the exception(Type Error).

        4.  Speed:
            ------
            Because of the fact that xrange() evaluates only when it is reuired.
            Due to its lazy evaluation , it is faster than range() function.


            Note:
                range() is faster if iterating over the same seuence multiple times.

                since , xrange() has to reconstruct the integer object every time. But range() will have
                real integer objects.( It will always perform worse in terms of memory however)


3.  Print Statement:
    ----------------
    In Python 2.x print "Hi good Morning!!!" Works fine but in Python 3.x fails.
    In Python 3.x , print function expects parenthesis .

    eg:
    print("Hi Good Morning!!!")

4.  Division Operator:
    ------------------
    If are poiinting our code or executing the python3.x code in python 2.x , it
    can be dangerous if integer division changes go unnoticed(Since it doesnot raise ant exception).
    It is preferred to use the floating value like 7.0/5 or 7/5.0 to get the expected result when
    porting your code.

    eg:
    print 7 / 5
    print -7 / 5


    Output in Python 2.x :
    1
    -2


5.  Error Handling:
    --------------
    There is a small change in error handling.
    Python 3.x , 'as' keyword is required.


    ex:

    try:
        trying_to_check_error
    except NameError, err:
        print err, 'Error Caused' # Wouldn't work in Python 3.x



    try:
        trying_to_check_error
    except NameError as err:
        print(err,'Error Caused') # 'as' Keyword is required in Python 3.x



6. __future__ Module:
    -----------------
    This is basically not a difference between two versions, but useful thing to mention here.
    The idea of __future__ module is to help in migration. we can use Python 3.x , if we are planning
    Python 3.x support in our 2.x code.


    from __future__ import division
    from __future__ import print_function

